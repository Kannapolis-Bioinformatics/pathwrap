#> [1] "integer"
z$value
#> [1] 12  1 NA  9
# Perfect! :)
factor(letters)
rev(levels(f1))
##
#as.numeric() vs as.double()
f1 <- factor(letters)
rev(levels(f1))
levels(f1) <- rev(levels(f1))
##
#as.numeric() vs as.double()
f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
f2 <- rev(factor(letters))
f3 <- factor(letters, levels = rev(letters))
f2
f3
#as.numeric() vs as.double()
f1 <- factor(letters)
f1
levels(f1) <- rev(levels(f1))
levels(f1)
rev(levels(f1))
length(a)
a <- matrix(1:6, ncol = 3, nrow = 2)
length(a)
b <- array(1:12, c(2, 3, 2))
length(b)
dim(b)
y <- c(list(1, 2), c(3, 4))
y
is.atomic(y)
is.list(x)
is.list(y)
x <-list(list(1, 2), c(3, 4))
is.list(x)
x
as.vector()
as.numeric("one")
as.numeric("one")
as.numeric("one")
"one" <2
c(1, FALSE)
c("a", 1)
c(list(1), "a")
str( c(list(1), "a"))
c(TRUE, 1L)
x <-factor(c("a", "b", "b", "a"))
x[2] <- "c"
x
x
x <-factor(c("a", "b", "b", "a"))
x
x[2] <- "c"
x
f1 <- factor(letters)
levels(f1)
levels(f1) <- rev(levels(f1))
levels(f1)
f1
factor(letters)
f2 <- rev(factor(letters))
f2
f3 <- factor(letters, levels = rev(letters))
f3
f1 <- factor(letters)
f1
class(f2)
class(f1)
b <- array(1:12, c(2, 3, 2))
a <- matrix(1:6, ncol = 3, nrow = 2)
length(a)
length(b)
names(a)
rownames(a) <- c("A", "B")
colnames(a) <- c("a", "b", "c")
names(a)
dimnames(a)
names(b)
dimnames(a)
dimnames(b)
dimnames(b) <- list(c("one", "two"), c("a", "b", "c"), c("A", "B"))
b
str(1:3)    # 1d vector
str(matrix(1:3, ncol = 1)) # column vector
str(matrix(1:3, nrow = 1)) # row vector
str(array(1:3, 3))  # "array" vector
df <- data.frame(x = 1:3, y = c("a", "b", "c"))
df$y
class(df$y)
str(f)
str(df)
stringsAsFactor
options(stringsAsFactors)
bad <- data.frame(cbind(a = 1:2, b = c("a", "b")))
bad <- data.frame(cbind(a = 1:2, b = c("a", "b")))
bad
str(bd)
str(bad)
good <- data.frame(a = 1:2, b = c("a", "b"),
)
good <- data.frame(a = 1:2, b = c("a", "b"))
good
str(bad)
good <- matrix(a = 1:2, b = c("a", "b"))
good <- as.matrix(a = 1:2, b = c("a", "b"))
good <- as.matrix(x = 1:2, y = c("a", "b"))
str(good)
df <- data.frame(x = 1:3)
df
df$y <- list(1:2, 1:3, 1:4)
df
dfl <- data.frame(x = 1:3, y = I(list(1:2, 1:3, 1:4)))
dfl
str(dfl)
attributes(dfl)
f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
f1
?as.matrix
x <- c(2.1, 4.2, 3.3, 5.4)
x <- c(2.1, 4.2, 3.3, 5.4)
x[x > 3]
x[c(TRUE, TRUE, NA, FALSE)]
#> [1] 2.1 4.2 NA
(y <- setNames(x, letters[1:4]))
y[c("d", "c", "a")]
(vals <- outer(1:5, 1:5, FUN = "paste", sep = ","))
vals[c(4, 15)]
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df
df[df$x == 2,]
df <- data.frame(x = c(1:3, 1:3), y =c(3:1, 3:1), z = letters[1:3])
df
df[df$x == 2,]
df[c(1, 3),]
df <- data.frame(x = c(2, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))
df
rep(1:nrow(df), df$n)
df[rep(1:nrow(df), df$n),]
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df$z <- NULL
df
df[setdiff(names(df), "z")]
x <- sample(10) < 4
x
(x1 <- 1:10 %% 2 == 0)
1:10 %% 2 == 0
(x2 <- which(x1))
(y1 <- 1:10 %% 5 == 0)
y1 <- 1:10 %% 5 == 0
y1
x <- outer(1:5, 1:5, FUN = "*")
x[upper.tri(x)]
x
mtcars[1:20]
mtcars[1:10]
x <- factor(LETTERS[1:4]); names(x) <- letters[1:4]
x
rep(x, 2)
rep(x, each = 2)
rep.int(x, 2)  # no names
rep_len(x, 10)
class(x)
stopifnot(rev(1:7) == 7:1)  #- don't need 'rev' here
stopifnot(rev(1:7) == 7:1)  #- don't need 'rev' here
require(stats); require(graphics)
n <- 10; nn <- 100
g <- factor(round(n * runif(n * nn)))
x <- rnorm(n * nn) + sqrt(as.numeric(g))
xg <- split(x, g)
g
x
xg
hist(replicate(100, mean(rexp(10))))
chartr("a-cX", "D-Fw", x)
chartr("a-cX", "D-Fw", x)
x <- "MiXeD cAsE 123"
chartr("iXs", "why", x)
chartr("a-cX", "D-Fw", x)
InsectSprays
InsectSprays
bymedian <- with(InsectSprays, reorder(spray, count, median))
bymedian
Z <- stats::rnorm(10000)
table(cut(Z, breaks = -6:6))
cut(rep(1,5), 4) #-- dummy
x <- ftable(mtcars[c("cyl", "vs", "am", "gear")])
x
ftable(x, row.vars = c(2, 4))
install.packages("pryr")
library(pryr)
f <- function(x) x^2
f
objs <- mget(ls("package:base"), inherits = TRUE)
objs
funs <- Filter(is.function, objs)
funs
length(funs)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
rm(x, h)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k
k()
rm(j, k)
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)
}
j()
j()
c <- 10
c(c = c)
f <- function(x) {
f <- function(x) {
f <- function(x) {
x^2
}
f(x) + 1
}
f(x) * 2
}
f(10)
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
pri
nt(a)}
j()
j <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
print(a)}
j()
j()
a
is.primitive(sum)
srcref(sum)
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
rm(j, k)
c<-10
c(c=c)
class(c(c=c))
x <- list(1:3, 4:9, 10:12)
sapply(x, "[", 2)
#> [1] 2 5 11
# equivalent to
sapply(x, function(x) x[2])
#> [1] 2 5 11
f <- function(x) {
force(x)
10
}
f(stop("This is an error!"))
ls()
x
f <- function(x = ls()) {
a <- 1
x
}
f()
f(ls())
y <- runif(min = 0, max = 1, 20)
y
x <- sample(replace = TRUE, 20, x = c(1:10, NA))
cor(m = "k", y = y, u = "p", x = x)
cor(m = "k", y = y, u = "p", x = x)
f2 <- function(x = z) {
z <- 100
x
}
f2()
BiocManager::install("https://github.com/raw-lab/pathwrap/tree/rnaseqwrap")
library(pathviewwrap)
remove.packages("pathviewwrap", lib="~/Library/R/x86_64/4.2/library")
library(pathviewwrap)
library(pathviewwrap)
library(pathviewwrap)
library(pathviewwrap)
BiocManager::install("https://github.com/raw-lab/pathwrap/tree/rnaseqwrap")
library(pathviewwrap)
BiocManager::install("https://github.com/raw-lab/pathwrap")
library(pathviewwrap)
BiocManager::install("raw-lab/pathwrap")
library(pathviewwrap)
BiocManager::install("https://github.com/raw-lab/pathwrap/tree/rnaseqwrap")
gh_install_packages("pathviewwrap", ref = "rnaseqwrap")
library(devtools)
gh_install_packages("pathviewwrap", ref = "rnaseqwrap")
library(githubinstall)
BiocManager
BiocManager::install("githubinstall")
library(githubinstall)
gh_install_packages("pathviewwrap", ref = "rnaseqwrap")
gh_install_packages("pathviewwrap", ref = "rnaseqwrap")
BiocManager::install("raw-lab/pathviewwrap", ref="rnaseqwrap")
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap")
library(Rhisat2)
remove.packages("Rhisat2", lib="~/Library/R/x86_64/4.2/library")
detach("package:pathviewwrap", unload = TRUE)
remove.packages("pathviewwrap", lib="~/Library/R/x86_64/4.2/library")
library(Rhisat2)
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
library(pathviewwrap)
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
library(pathviewwrap)
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
library(Rsamtools)
scanFaIndex()
scanFaIndex()
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
library(pathviewwrap)
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
library(pathviewwrap)
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
library(pathviewwrap)
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
library(pathviewwrap)
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
library(pathviewwrap)
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results"
if (!file.exists(outdir)){
# default output file
dir.create(outdir)
}
result.dir <- outdir
phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt"
# make sure the second column is class and first column is sample name
# make sure file is tab seperated
if (!file.exists(phenofile)){ ###TO DO make sure reference is first aplhanumerically#
print("Please provide phenofile with Class information")
}
coldata <- read.table(phenofile, sep = "\t", header = T)
if(colnames(coldata)[2]!="Class"){
print("Please make sure class information is in cloumn 2 with colname 'Class' . ")
}
coldata$Class <- as.factor(coldata$Class)
# ref <- which(coldata[, 2] ==  levels(coldata[, 2])[1])
# samp <- which(coldata[, 2] ==  levels(coldata[, 2])[2])
# grp.idx <-NULL
# grp.idx[ref] <- "reference"
# grp.idx[samp] <- "sample"
##TO DO write something to automatically determine paired information, rev/fr etc
#print("this is first grp.idx")
#print(grp.idx)
#check and create dir for organizing results
checkcretdir <- function(parentname, dirname){
if(!file.exists(file.path(parentname, dirname))) {
dir.create(file.path(parentname, dirname))
}
assign(dirname,value = file.path(parentname, dirname), envir = .GlobalEnv)
}
folder_to_create<- list("fastqc_results", "fastp_results","gage_results", "differential_analysis","aligned_bam","pathway_analysis" )
trim_dir <-list ( "fastp_log", "unpaired")
diff_dir <-list ("DESeq2","edgeR")
pathway_types <- list("KEGG", "GO")
kegg_types <- list("signalling", "metabolism", "disease", "sig_n_met")
go_types <- list("biological_process", "molecular_function", "cellular_component")
lapply(folder_to_create, checkcretdir, parentname= result.dir  )
lapply(trim_dir, checkcretdir, parentname= file.path(result.dir ,"fastp_results")  )
lapply(diff_dir, checkcretdir, parentname= file.path(result.dir , "differential_analysis")  )
lapply(pathway_types, checkcretdir, parentname= file.path(result.dir , "gage_results")  )
lapply(kegg_types, checkcretdir, parentname= file.path(result.dir ,"gage_results","KEGG" )  )
lapply(go_types, checkcretdir, parentname= file.path(result.dir ,"gage_results","GO" )  )
#just to make sure rest of codes are same
qc.dir <- fastqc_results
diff.dir <- differential_analysis
trim.dir <- fastp_results
gage.dir <- gage_results
trim.log <- fastp_log
pathway.dir <- pathway_analysis
edger.dir <- edgeR
deseq2.dir <- DESeq2
kegg.dir <- KEGG
go.dir <- GO
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
pathviewwrap(fq.dir = "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw", ref.dir = "~/Documents/Research/UNCC/old/Data/Reference/mouse",
phenofile = "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt", outdir = "~/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness = "SE",
entity = "Mus musculus", corenum = 8)
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
library(pathviewwrap)
pathviewwrap(fq.dir = "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw", ref.dir = "~/Documents/Research/UNCC/old/Data/Reference/mouse",
phenofile = "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt", outdir = "~/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness = "SE",
entity = "Mus musculus", corenum = 8)
getwd()
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
package(pathviewwrap)
library(pathviewwrap)
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
setwd("/Users/edhungel/Documents/GitHub/pathwrap/R")
for (files in list.files(".", full.names = T, pattern = ".R"))
{
source(files)
}
#library(pathviewwrap)
dirlist <- sanity_check(fq.dir, ref.dir , phenofile, outdir, endness,  entity , corenum , diff.tool, compare)
fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw"
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse"
phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt"
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results"
endness="SE",  entity="Mus musculus", corenum = 8
endness="SE"
entity="Mus musculus"
corenum = 8
diff.tool="DESEQ2"
compare="unpaired"
seq_tech="Illumina"
#library(pathviewwrap)
dirlist <- sanity_check(fq.dir, ref.dir , phenofile, outdir, endness,  entity , corenum , diff.tool, compare)
qc.dir <- dirlist[1]
trim.dir <- dirlist[2]
sampleFile <- dirlist[3]
genomeFile<- dirlist[4]
geneAnnotation <- dirlist[5]
deseq2.dir <- dirlist[6]
gage.dir <- dirlist[7]
coldata <- dirlist[8]
run_qc(fq.dir, qc.dir, corenum)
fq.dir
qc.dir
run_qc(fq.dir, "/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results/fastqc_results", corenum)
qc.dir <- dirlist[1]
qc.dir
qc.dir <- unlist(dirlist[1])
qc.dir
BiocManager::install("raw-lab/pathwrap", ref="rnaseqwrap", force = T)
library(pathviewwrap)
pathviewwrap(fq.dir="~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw",
ref.dir = "/Users/edhungel/Documents/Research/UNCC/old/Data/Reference/mouse", phenofile= "~/Documents/Research/UNCC/old/mouse/fresh/mouse_raw/phenogz.txt",
outdir="/Users/edhungel/Documents/Research/UNCC/Research_rotation-II/newtmp/pathviewwrap/results", endness="SE",  entity="Mus musculus", corenum = 8,
diff.tool="DESEQ2", compare="unpaired", seq_tech="Illumina")
